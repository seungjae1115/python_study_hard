print("Hello, Python!")

# 주석 (comment) : 컴퓨터가 읽는 부분이 아니라 사람이 읽을 수 있도록
# 정보를 제공하는 방법으로 주석처리가 되어있는 부분은 인터프리터가
# 코드로 인지하지 않음

# 미리 작성해놓고 후애 주석 처리를 하는 방법: ctrl =/

'''
다중 주석 처리

앞으로 우리가 필기를 하게되는 내용이 여러 줄에 걸쳐 있을 경우에는 미리
작은 따옴표 세 개 (누르면 자동으로 세 개 더 나옴)를 눌러주고 타이핑을 
진행하게 됩니다.-> 엔터쳤을 때 자동으로 나머지 세 개의 작은 따옴표가
내려가게 되면서 ctrl+/ 를 할 필요가 없다는 장점이 있겠습니다.

1번 라인에서 우리가 작성한 print("Hello, Python!)을 분석하겠다.
'''
print("1")
print(1)
# print(Hello,Python! ) -> 오류발생 주석처리를 하니까 읽지 않음
'''
19-20번 라인의 출력결과가 동일하기 때문에 큰따옴표의 필요성에 대해 
인지하지 못할 수 있지만, 21번 라인의 오류가 발생하는 점에서 차이를 
발견할 수 있음.
'''
print(type("1"))  # <class 'str'>
print(type(1))    # <class 'int'>
# type의 차이에 따른 검증
print("1"+"2")   #12 / 문자열이라서 순서가 중요
print(1+2)       #3  / 정수라서 1+2=2+1
'''
int: integer의 축약어로 '정수'를 의미

여러분들이 자기 소개를 한다고 가정했을 때 그것이 콘솔에 출력될려면 
""내에 작성해야겠지
'''
#
#print("MBTI는 INFP입니다. "
#     "엔터를 치니까 뭔가 추가됐다.")
#print('''
#이런 경우에는 엔터를 치게 됐을 때
#콘솔에서 엔터키가  적용이 된 상태로
#작성이 가능하다.
#''')
'''
그런데 지금 보면 콘솔창에 찍히는 문자 개수 보다 우리가 타이핑하는게 
훨씬 많은 상황이다.
콘솔창에서는 print("")만큼은 출력을 해주지 않으니까 
'''
# print("제 이름은 윤승재입니다. 나이는 21살이고, 부산광역시 해운대구에 삽니다.")
introduction = "제 이름은 윤승재입니다. 나이는 21살이고, 부산광역시 해운대구에 삽니다."
a = "제 이름은 윤승재입니다. 나이는 21살이고, 부산광역시 해운대구에 삽니다."

print(a)

print(type(introduction))

'''
변수 : 데이터를 저장하는 바구니 -> 이름을 어떻게 붙여주는가는
      자유롭다. a도 가능/introduce도 가능 

     면수 명명 규칙(python 버전)
     1. 변ㅅ의 경우 소문자로만 입력
     2. 여러 단어가 합쳐진 변수의 경우 _로 연결
      ex) school_name -> 이런 것을 snake case 라고 함
      cf) Java의 경우 schoolName으로 
name 이라는 변수에 내 이름을 대입
age 라는 변수에 내 나이를 대입

'''
name = "윤승재"
age = 21
print(name)
print(age+1)    # 변수에 정수가 담겨 있다면 수학적 연산이 가능

b = 1
print(b)   #결과값: 1
b= b + 1
print(b)   #결과값: 2 -> 코드는 순서대로 실행됨,
'''
대입연산자 
1.=: = 오른쪽에 있는 데이터를 = 왽족에 있는 변수에 대입한다는 의미.
    즉, 78번 라인의 b = 1는 1이라는 정수 데이터를 b라는 변수에 대입하고,
    80번 라인에서 b(1) + 1 라는 데이터를 다시 b라는 변수에 대입했다는 의미로 
    그 결과 81번 라인에서 2가 출력됨
    
변수는 처음에 변수 이름을 정하고 "=" 표시 뒤에 넣고자 하는 데이터를 
지버넣으면 print()를 통해서 출력하거나 
혹은 수학적 연산이 가능하고, 동일한 변수명에 새로운 데이터를 
다시 집어넣는 것도 가능     
'''
name = "윤승재"
age = 21
introduction = "------"
print(introduction)

'''
f-string : formatted string의 축약어로 str 내에 변수를 불러올 수 있음
"" 내에 변수를 불러오기 위해서는 {}를 삽이비하고, 불러오고자 하는 변수를 기입함 
'''
print(f"제 이름은 {name}이고, 나이는 {age}살 입니다. 내년에는 {age+1}살이 됩니다.")

'''
지금까지 수업한 방식으로는 미리 데이터를 준비해놓고 거기에 변수를 대입합니다.
즉 실시간으로 데이터를 입력할 수가 없습니다.

이름이 "김일"이었다가 "김이"로 바꾸기 위해서는 
name = "김일"
print(name)
name = "김이"
print(name)
과 같은 방식으로 코드를 작성해야 하는 번거로움이 있습니다.
이를 해결하기 위해서는 우리는 input()를 이용할 수 있음
'''
input("당신의 이름은 무엇입니까? >>>")
'''
위와 같이 입력하고 실행시키면 콘솔창에 이름을 입력할 수 있도록 커서가 깜빡거립니다.
거기에 이름을 입력하면 프로그램이 종료된다는 점을 알 수 있다.

즉, 데이터를 입력 받기는 했지만 변수에 저장하는 과정이 없었기 때문에 데이터가 휘발됩니다.
그렇다면 입력 받은 값을 변수에 대입하면 저장이 됨
'''
name = input("당신의 이름이 무엇입니까? >>>")
print(name)
print(f"제 이름은 {name}입니다.")
'''
과 같이 할 수 있다.

124-126라인까지의 코드 분석함-> input() 함수는 ()안에 있는 질문 사항(프롬프트)을 
콘솔에 출력하여 사용자로 하여금 입력받을 수 있게끔 한다.
사용자가 프롬프트에 맞는 정보를 입력하면, 그 데이터는 name이라는 변수에 저장됨
이를 print() 함수를 통해 콘솔로 출력하게 됨

'''